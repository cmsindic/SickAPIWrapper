from machine import Pin, I2C
import time
import sys
import select
from bno055 import BNO055
from quadrature import Quadrature

# === I2C IMU Setup ===
i2c = I2C(0, scl=Pin(1), sda=Pin(0))  # GP1 = SCL, GP0 = SDA
imu = BNO055(i2c)
time.sleep(0.05)  # Let IMU boot

# === PIO Quadrature Encoder Setup ===
encoder = Quadrature(pin_a=2, pin_b=3)
zero_offset = 0  # Tracks encoder reset baseline

# === Main Loop ===
while True:
    # Check for serial input to zero encoder
    if sys.stdin in select.select([sys.stdin], [], [], 0)[0]:
        cmd = sys.stdin.readline().strip()
        if cmd.upper() in ("ZERO", "RESET"):
            zero_offset = encoder.position()

    # Get time and adjusted encoder count
    t = time.ticks_us()
    raw_count = encoder.position()
    count = raw_count - zero_offset

    # Read IMU
    try:
        euler = imu.euler()
    except:
        euler = (None, None, None)

    # Output line
    print(f"{t},{count},{euler[0]},{euler[1]},{euler[2]}")
    time.sleep_us(500)  # ~2 kHz

